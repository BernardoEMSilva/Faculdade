/// <reference types="node" />
declare module "rollup.config" {
    namespace _default {
        const input: string;
        const plugins: import("rollup").Plugin[];
        const output: {
            file: any;
            format: string;
            sourcemap: boolean;
        }[];
    }
    export default _default;
}
declare module "src/index" {
    import { Writable } from 'stream';
    import { INeuralNetworkTrainOptions } from 'brain.js/dist/src/neural-network';
    import { INeuralNetworkState } from 'brain.js/dist/src/neural-network-types';
    export interface ITrainStreamTrainOptions {
        iterations: number;
        errorThresh: number;
        log: boolean;
        logPeriod: number;
        callbackPeriod: number;
        callback: (status: {
            iterations: number;
            error: number;
        }) => void;
    }
    export interface ITrainStreamNetwork<InputType, FormattedType, TrainOptsType extends Partial<ITrainStreamTrainOptions>> {
        trainOpts: TrainOptsType;
        updateTrainingOptions: (trainOpts: Partial<TrainOptsType>) => void;
        addFormat: (data: InputType) => void;
        formatData: (data: InputType[]) => FormattedType[];
        trainPattern: (value: FormattedType, logErrorRate?: boolean) => number | null;
        verifyIsInitialized: (data: FormattedType[]) => void;
    }
    interface ITrainStreamOptions<Network> {
        neuralNetwork: Network;
        floodCallback?: () => void;
        doneTrainingCallback?: (stats: {
            error: number;
            iterations: number;
        }) => void;
    }
    export class TrainStream<Network extends ITrainStreamNetwork<Parameters<Network['addFormat']>[0], Parameters<Network['trainPattern']>[0], Partial<Network['trainOpts']>>> {
        writable: Writable;
        neuralNetwork: Network;
        dataFormatDetermined: boolean;
        i: number;
        size: number;
        count: number;
        sum: number;
        floodCallback?: () => void;
        doneTrainingCallback?: (stats: {
            error: number;
            iterations: number;
        }) => void;
        iterations: number;
        errorThresh: number;
        log: boolean | ((status: INeuralNetworkState) => void);
        logPeriod: number;
        callbackPeriod: number;
        callback?: (status: {
            iterations: number;
            error: number;
        }) => void;
        firstDatum: Parameters<Network['addFormat']>[0] | undefined;
        constructor(options: Partial<ITrainStreamOptions<Network>> & Partial<INeuralNetworkTrainOptions>);
        write(data: Parameters<Network['addFormat']>[0]): void;
        endInputs(): void;
        finishStreamIteration(): void;
    }
}
declare module "src/index.test" { }
//# sourceMappingURL=index.d.ts.map