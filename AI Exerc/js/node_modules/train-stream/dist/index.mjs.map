{"version":3,"file":"index.mjs","sources":["../../src/index.ts"],"sourcesContent":["import { Writable } from 'stream';\nimport { INeuralNetworkTrainOptions } from 'brain.js/dist/src/neural-network';\nimport { INeuralNetworkState } from 'brain.js/dist/src/neural-network-types';\n\nexport interface ITrainStreamTrainOptions {\n  iterations: number;\n  errorThresh: number;\n  log: boolean;\n  logPeriod: number;\n  callbackPeriod: number;\n  callback: (status: { iterations: number; error: number }) => void;\n}\n\nexport interface ITrainStreamNetwork<\n  InputType,\n  FormattedType,\n  TrainOptsType extends Partial<ITrainStreamTrainOptions>\n  > {\n  trainOpts: TrainOptsType;\n  updateTrainingOptions: (trainOpts: Partial<TrainOptsType>) => void;\n  addFormat: (data: InputType) => void;\n  formatData: (data: InputType[]) => FormattedType[];\n  trainPattern: (value: FormattedType, logErrorRate?: boolean) => number | null;\n  verifyIsInitialized: (data: FormattedType[]) => void;\n}\n\ninterface ITrainStreamOptions<Network> {\n  neuralNetwork: Network;\n  floodCallback?: () => void;\n  doneTrainingCallback?: (stats: { error: number; iterations: number }) => void;\n}\n\nexport class TrainStream<\n  Network extends ITrainStreamNetwork<\n    Parameters<Network['addFormat']>[0],\n    Parameters<Network['trainPattern']>[0],\n    Partial<Network['trainOpts']>\n    >\n  > {\n  writable: Writable;\n  neuralNetwork: Network;\n\n  dataFormatDetermined: boolean;\n  i: number;\n  size: number;\n  count: number;\n  sum: number;\n  floodCallback?: () => void;\n  doneTrainingCallback?: (stats: { error: number; iterations: number }) => void;\n  iterations: number;\n  errorThresh: number;\n  log: boolean | ((status: INeuralNetworkState) => void);\n  logPeriod: number;\n  callbackPeriod: number;\n  callback?: (status: { iterations: number; error: number }) => void;\n  firstDatum: Parameters<Network['addFormat']>[0] | undefined;\n\n  constructor(options: Partial<ITrainStreamOptions<Network>> & Partial<INeuralNetworkTrainOptions>) {\n    this.writable = new Writable({\n      objectMode: true,\n    });\n    this.writable._write = (\n      chunk: Parameters<Network['addFormat']>[0],\n      enc: BufferEncoding,\n      next: (error?: Error | null) => void\n    ) => {\n        if (!chunk) {\n        // check for the end of one iteration of the stream\n        this.writable.emit('finish');\n        return next();\n      }\n\n      if (!this.dataFormatDetermined) {\n        this.size++;\n        this.neuralNetwork.addFormat(chunk);\n\n        if (this.firstDatum === undefined) {\n          this.firstDatum = chunk;\n        }\n\n        return next();\n      }\n\n      this.count++;\n\n      const data = this.neuralNetwork.formatData([chunk]);\n      const error = this.neuralNetwork.trainPattern(data[0], true);\n\n      if (error !== null) {\n        this.sum += error;\n      }\n\n      // tell the Readable Stream that we are ready for more data\n      next();\n    };\n\n    // require the neuralNetwork\n    if (!options.neuralNetwork) {\n      throw new Error(\n        'No neural network specified. Please see list of available network types: https://github.com/BrainJS/brain.js#neural-network-types'\n      );\n    }\n\n    const { neuralNetwork } = options;\n    // inherit trainOpts settings from neuralNetwork\n    (neuralNetwork as Network).updateTrainingOptions(options);\n    const trainOpts = neuralNetwork?.trainOpts as ITrainStreamTrainOptions; // just updated from above line\n\n    this.neuralNetwork = neuralNetwork as Network;\n    this.dataFormatDetermined = false;\n    this.i = 0; // keep track of internal iterations\n    this.size = 0;\n    this.count = 0;\n    this.sum = 0;\n    this.floodCallback = options.floodCallback;\n    this.doneTrainingCallback = options.doneTrainingCallback;\n\n    this.iterations = trainOpts.iterations;\n    this.errorThresh = trainOpts.errorThresh;\n    this.log = trainOpts.log;\n    this.logPeriod = trainOpts.logPeriod;\n    this.callbackPeriod = trainOpts.callbackPeriod;\n    this.writable.on('finish', this.finishStreamIteration.bind(this));\n    this.callback = trainOpts.callback;\n  }\n\n  write(data: Parameters<Network['addFormat']>[0]): void {\n    this.writable.write(data);\n  }\n\n  endInputs(): void {\n    this.writable.write(false);\n  }\n\n  finishStreamIteration(): void {\n    if (this.dataFormatDetermined && this.size !== this.count) {\n      console.warn(\n        \"This iteration's data length was different from the first!\"\n      );\n    }\n\n    if (!this.dataFormatDetermined && this.firstDatum !== undefined) {\n      const data = this.neuralNetwork.formatData([this.firstDatum]);\n      this.neuralNetwork.verifyIsInitialized(data);\n      this.dataFormatDetermined = true;\n\n      if (typeof this.floodCallback === 'function') {\n        this.floodCallback();\n      }\n\n      return;\n    }\n\n    const error = this.sum / this.size;\n\n    if (this.log && this.i % this.logPeriod === 0) {\n      if (typeof this.log === 'function') {\n        this.log({\n          iterations: this.i,\n          error: error,\n        });\n      } else {\n        console.info(`iterations: ${this.i}, training error: ${error}`);\n      }\n    }\n    if (this.callback && this.i % this.callbackPeriod === 0) {\n      this.callback({\n        error,\n        iterations: this.i,\n      });\n    }\n\n    this.sum = 0;\n    this.count = 0;\n    // update the iterations\n    this.i++;\n\n    // do a check here to see if we need the stream again\n    if (this.i < this.iterations && error > this.errorThresh) {\n      if (typeof this.floodCallback === 'function') {\n        return this.floodCallback();\n      }\n    } else {\n      // done training\n      if (typeof this.doneTrainingCallback === 'function') {\n        return this.doneTrainingCallback({\n          error,\n          iterations: this.i,\n        });\n      }\n    }\n  }\n}\n"],"names":[],"mappings":";;MAgCa,WAAW,CAAA;AAyBtB,IAAA,WAAA,CAAY,OAAoF,EAAA;AAC9F,QAAA,IAAI,CAAC,QAAQ,GAAG,IAAI,QAAQ,CAAC;AAC3B,YAAA,UAAU,EAAE,IAAI;AACjB,SAAA,CAAC,CAAC;AACH,QAAA,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CACrB,KAA0C,EAC1C,GAAmB,EACnB,IAAoC,KAClC;YACA,IAAI,CAAC,KAAK,EAAE;;AAEZ,gBAAA,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAC7B,OAAO,IAAI,EAAE,CAAC;AACf,aAAA;AAED,YAAA,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE;gBAC9B,IAAI,CAAC,IAAI,EAAE,CAAC;AACZ,gBAAA,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;AAEpC,gBAAA,IAAI,IAAI,CAAC,UAAU,KAAK,SAAS,EAAE;AACjC,oBAAA,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;AACzB,iBAAA;gBAED,OAAO,IAAI,EAAE,CAAC;AACf,aAAA;YAED,IAAI,CAAC,KAAK,EAAE,CAAC;AAEb,YAAA,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;AACpD,YAAA,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YAE7D,IAAI,KAAK,KAAK,IAAI,EAAE;AAClB,gBAAA,IAAI,CAAC,GAAG,IAAI,KAAK,CAAC;AACnB,aAAA;;AAGD,YAAA,IAAI,EAAE,CAAC;AACT,SAAC,CAAC;;AAGF,QAAA,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE;AAC1B,YAAA,MAAM,IAAI,KAAK,CACb,mIAAmI,CACpI,CAAC;AACH,SAAA;AAED,QAAA,MAAM,EAAE,aAAa,EAAE,GAAG,OAAO,CAAC;;AAEjC,QAAA,aAAyB,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;QAC1D,MAAM,SAAS,GAAG,aAAa,KAAb,IAAA,IAAA,aAAa,KAAb,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,aAAa,CAAE,SAAqC,CAAC;AAEvE,QAAA,IAAI,CAAC,aAAa,GAAG,aAAwB,CAAC;AAC9C,QAAA,IAAI,CAAC,oBAAoB,GAAG,KAAK,CAAC;AAClC,QAAA,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;AACX,QAAA,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;AACd,QAAA,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;AACf,QAAA,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;AACb,QAAA,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC;AAC3C,QAAA,IAAI,CAAC,oBAAoB,GAAG,OAAO,CAAC,oBAAoB,CAAC;AAEzD,QAAA,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC,UAAU,CAAC;AACvC,QAAA,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC,WAAW,CAAC;AACzC,QAAA,IAAI,CAAC,GAAG,GAAG,SAAS,CAAC,GAAG,CAAC;AACzB,QAAA,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC;AACrC,QAAA,IAAI,CAAC,cAAc,GAAG,SAAS,CAAC,cAAc,CAAC;AAC/C,QAAA,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;AAClE,QAAA,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC;KACpC;AAED,IAAA,KAAK,CAAC,IAAyC,EAAA;AAC7C,QAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;KAC3B;IAED,SAAS,GAAA;AACP,QAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;KAC5B;IAED,qBAAqB,GAAA;QACnB,IAAI,IAAI,CAAC,oBAAoB,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,KAAK,EAAE;AACzD,YAAA,OAAO,CAAC,IAAI,CACV,4DAA4D,CAC7D,CAAC;AACH,SAAA;QAED,IAAI,CAAC,IAAI,CAAC,oBAAoB,IAAI,IAAI,CAAC,UAAU,KAAK,SAAS,EAAE;AAC/D,YAAA,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;AAC9D,YAAA,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;AAC7C,YAAA,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;AAEjC,YAAA,IAAI,OAAO,IAAI,CAAC,aAAa,KAAK,UAAU,EAAE;gBAC5C,IAAI,CAAC,aAAa,EAAE,CAAC;AACtB,aAAA;YAED,OAAO;AACR,SAAA;QAED,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC;AAEnC,QAAA,IAAI,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,KAAK,CAAC,EAAE;AAC7C,YAAA,IAAI,OAAO,IAAI,CAAC,GAAG,KAAK,UAAU,EAAE;gBAClC,IAAI,CAAC,GAAG,CAAC;oBACP,UAAU,EAAE,IAAI,CAAC,CAAC;AAClB,oBAAA,KAAK,EAAE,KAAK;AACb,iBAAA,CAAC,CAAC;AACJ,aAAA;AAAM,iBAAA;gBACL,OAAO,CAAC,IAAI,CAAC,CAAe,YAAA,EAAA,IAAI,CAAC,CAAC,CAAqB,kBAAA,EAAA,KAAK,CAAE,CAAA,CAAC,CAAC;AACjE,aAAA;AACF,SAAA;AACD,QAAA,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,cAAc,KAAK,CAAC,EAAE;YACvD,IAAI,CAAC,QAAQ,CAAC;gBACZ,KAAK;gBACL,UAAU,EAAE,IAAI,CAAC,CAAC;AACnB,aAAA,CAAC,CAAC;AACJ,SAAA;AAED,QAAA,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;AACb,QAAA,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;;QAEf,IAAI,CAAC,CAAC,EAAE,CAAC;;AAGT,QAAA,IAAI,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU,IAAI,KAAK,GAAG,IAAI,CAAC,WAAW,EAAE;AACxD,YAAA,IAAI,OAAO,IAAI,CAAC,aAAa,KAAK,UAAU,EAAE;AAC5C,gBAAA,OAAO,IAAI,CAAC,aAAa,EAAE,CAAC;AAC7B,aAAA;AACF,SAAA;AAAM,aAAA;;AAEL,YAAA,IAAI,OAAO,IAAI,CAAC,oBAAoB,KAAK,UAAU,EAAE;gBACnD,OAAO,IAAI,CAAC,oBAAoB,CAAC;oBAC/B,KAAK;oBACL,UAAU,EAAE,IAAI,CAAC,CAAC;AACnB,iBAAA,CAAC,CAAC;AACJ,aAAA;AACF,SAAA;KACF;AACF;;;;"}